#!/usr/bin/env ruby

require 'rubygems'
require 'json'

if ARGV.count < 2
  puts 'Not enough parameters'
  exit(1)
end

# puts ARGV[0]
# puts ARGV[1]
load(ARGV[0])

output = `bin/rspec -f j spec/classes/#{ARGV[1]}`
output = JSON.parse output
failures = output["summary"]["failure_count"]
output = `bin/rspec spec/classes/#{ARGV[1]}`
if failures > 0
  puts output
  puts 'Failure limit exceeded. You should keep zero amount of failures from rspec.'
  exit(1)
else
  puts "From rspec: failures count is #{failures}"
end

# rubocop warnings
output = `bin/rubocop --rails --format json #{ARGV[0]}`
output = JSON.parse output
warnings = output["summary"]["offence_count"]
output = `bin/rubocop --rails`
if warnings > 0
  puts output
  puts 'Warning limit exceeded. You should keep zero amount of warnings from rubocop.'
  exit(1)
else
  puts "From rubocop: warnings count is #{warnings}."
end

# rails_best_practices warnings
output = `bin/rails_best_practices --silent #{ARGV[0]}`
warnings = (output.match(/Found\s(\d+)/) || [0, 0])[1].to_i
if warnings > 0
  puts output
  puts 'Warning limit exceeded. You should keep zero amount of warnings from rails_best_practices.'
  exit(1)
else
  puts "From rails_best_practices: warnings count is #{warnings}."
end

exit(0)
